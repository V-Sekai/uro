version: "3.9"
services:
  database:
    image: postgres:16.6-alpine
    restart: always
    shm_size: 128mb
    environment:
      POSTGRES_USER: vsekai
      POSTGRES_PASSWORD: vsekai
    volumes:
      - "./postgres:/var/lib/postgresql/data"
    ports:
      - "5432:5432"
    healthcheck:
      test: pg_isready -U vsekai
      interval: 5s
      timeout: 5s

  redis:
    image: redis:7.4-alpine
    restart: always
    shm_size: 128mb
    volumes:
      - "./redis:/data"
    healthcheck:
      test: redis-cli ping
      interval: 5s
      timeout: 5s

  uro:
    build:
      context: .
      tags:
        - "uro:latest"
    restart: always
    links:
      - database
      - redis
    depends_on:
      database:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    env_file:
      - .env
    # healthcheck:
    #   test: curl --fail http://uro:4000/health || exit 1
    #   interval: 5s
    #   timeout: 5s

  nextjs:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    # healthcheck:
    #   test: curl --fail http://nextjs:3000/health || exit 1
    #   interval: 5s
    #   timeout: 5s
    depends_on:
      - uro

  caddy:
    image: caddy:2.9.1-alpine
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./caddy/data:/data
      - ./caddy/config:/config
    depends_on:
      - uro
      - nextjs
      # uro:
      #   condition: service_healthy
      #   restart: true
      # nextjs:
      #   condition: service_healthy
      #   restart: true

networks:
  uro:
    name: "uro"

volumes:
  caddy_data:
  caddy_config:
